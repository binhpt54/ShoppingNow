package com.vinova_g12.shoppingnow.data;import java.util.ArrayList;import java.util.List;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.SQLException;import android.database.sqlite.SQLiteDatabase;/** * Shopping-list Data API * @author codai2810 * */public class ItemsDataSource {	private SQLiteDatabase database;	private ItemHelper dbHelper;	private String[] allColumns = { ItemHelper.ID,ItemHelper.NAME,			ItemHelper.PLACE, ItemHelper.PRICE, ItemHelper.PRIORITY, 			ItemHelper.QUANTITY,ItemHelper.STATUS,ItemHelper.TIME, 			ItemHelper.DATE, ItemHelper.UNIT };		/**	 * Constructor used each time a new item database object is created.	 * 	 * @param context	 * 				The context in which the item database is created.	 */	public ItemsDataSource(Context context) {		dbHelper = new ItemHelper(context);			}	/**	 * Opens the database that will be used for reading and writing.	 * @throws SQLException 	 * 				if the database cannot be opened for writing	 */	public void open() throws SQLException {		database = dbHelper.getWritableDatabase();	}	/**	 * Close any opened database object	 */	public void close() {		dbHelper.close();	}	/**	 * Convenience method for deleting all records in the database.	 */	public void emptyTable(){		database.delete(ItemHelper.ITEM_TABLE_NAME, null, null);	}		/**	 * Method for inserting an item into the database	 * @param item 	 * 				the instance that need to be inserted into the database 	 */	public void addItem(Item item) {		ContentValues values = new ContentValues();		values.put(ItemHelper.NAME, item.getName());		values.put(ItemHelper.PLACE, item.getPlace());		values.put(ItemHelper.PRICE, item.getPrice());		values.put(ItemHelper.PRIORITY, item.getPriority());		values.put(ItemHelper.STATUS, item.getStatus());		values.put(ItemHelper.TIME, item.getTime());		values.put(ItemHelper.DATE, item.getDate());		values.put(ItemHelper.UNIT, item.getUnit());		database.insert(ItemHelper.ITEM_TABLE_NAME, null, values);	}		/**	 * Method for updating an item's information in the database 	 * @param item 	 * 				the instance that need to be updated	 */	public void updateItem(Item item) {		ContentValues values = new ContentValues();		values.put(ItemHelper.NAME, item.getName());		values.put(ItemHelper.PLACE, item.getPlace());		values.put(ItemHelper.PRICE, item.getPrice());		values.put(ItemHelper.PRIORITY, item.getPriority());		values.put(ItemHelper.STATUS, item.getStatus());		values.put(ItemHelper.TIME, item.getTime());		values.put(ItemHelper.DATE, item.getDate());		values.put(ItemHelper.UNIT, item.getUnit());		database.update(ItemHelper.ITEM_TABLE_NAME, values, 				ItemHelper.ID + "=" + item.getId(), null);	}		/**	 * Convenience method for deleting a row in the database.	 * @param itemId 	 * 				ID of the item need to be deleted.	 */	public void deleteItem(int itemId) {		database.delete(ItemHelper.ITEM_TABLE_NAME, 				ItemHelper.ID + " = " + itemId, null);	}		/**	 * Query the table, fetch all items in the table.	 * @return list of items fetched	 */	public List<Item> getAllItems() {		List<Item> items = new ArrayList<Item>();		Cursor cursor = database.query(ItemHelper.ITEM_TABLE_NAME, allColumns, 				null, null, null, null, null);				cursor.moveToFirst();		while(!cursor.isAfterLast()) {			Item item = cursorToItem(cursor);			items.add(item);			cursor.moveToNext();		}				cursor.close();		return items;	}		/**	 * Query the table, fetch all items in the table that have an attribute match the condition	 * @param selection 	 * 				the condition, could be time or place (both are string but different format)	 * @return list of items fetched	 */	public List<Item> getAllItems(String selection) {		List<Item> items = new ArrayList<Item>();		Cursor cursor = database.query(ItemHelper.ITEM_TABLE_NAME, allColumns, 				ItemHelper.PLACE + " = " + selection + "or" + ItemHelper.TIME + " = " + selection, 				null, null, null, null);				cursor.moveToFirst();		while(!cursor.isAfterLast()) {			Item item = cursorToItem(cursor);			items.add(item);			cursor.moveToNext();		}				cursor.close();		return items;	}			private Item cursorToItem(Cursor cursor) {		Item item = new Item();		item.setId(cursor.getInt(0));		item.setName(cursor.getString(1));		item.setPlace(cursor.getString(2));		item.setPrice(cursor.getInt(3));		item.setPriority(cursor.getInt(4));		item.setQuantity(cursor.getFloat(5));		item.setStatus(cursor.getInt(6));		item.setTime(cursor.getString(7));		item.setDate(cursor.getString(8));		item.setUnit(cursor.getString(9));		return item;	}}